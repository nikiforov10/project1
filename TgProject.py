from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv('TOKEN')
import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import pytz
import random

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TZ = "Europe/Moscow"
DATA_FILE = "data.json"

# === –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
CATEGORIES = {
    "workout": {"emoji": "üí™", "prefix": "–°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"},
    "birthday": {"emoji": "üéÇ", "prefix": "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É"},
    "default": {"emoji": "‚è∞", "prefix": ""}
}

# === –ì–∏—Ñ–∫–∏ ===
SUCCESS_GIFS = ["https://media.giphy.com/media/1.gif ", "https://media.giphy.com/media/2.gif "]
FAIL_GIFS = ["https://media.giphy.com/media/3.gif ", "https://media.giphy.com/media/4.gif "]

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ ===
reminders = {}  # {user_id: [ {time, text, category}, ... ]}
stats = {}  # {user_id: {workout_count: 0, total_tasks: 0}}
user_tags = {}  # {user_id: {tag_name: tag_text}}
user_states = {}  # {user_id: state}

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=TZ)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üèãÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    [KeyboardButton(text="‚ûï –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
    [KeyboardButton(text="üè∑Ô∏è –¢–µ–≥–∏")],
    [KeyboardButton(text="üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")]
], resize_keyboard=True)


# === –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
def load_data():
    global reminders, stats, user_tags
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r") as f:
                data = json.load(f)
                reminders = {int(k): v for k, v in data.get("reminders", {}).items()}
                stats = {int(k): v for k, v in data.get("stats", {}).items()}
                user_tags = {int(k): v for k, v in data.get("user_tags", {}).items()}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


def save_data():
    try:
        with open(DATA_FILE, "w") as f:
            json.dump({
                "reminders": reminders,
                "stats": stats,
                "user_tags": user_tags
            }, f, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in reminders:
        reminders[user_id] = []
        stats[user_id] = {"workout_count": 0, "total_tasks": 0}
        user_tags[user_id] = {}
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –î–æ–±–∞–≤—å—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n`tag –≤—Ä–µ–º—è —Ç–µ–∫—Å—Ç`",
                        parse_mode="Markdown", reply_markup=main_menu)


@dp.message(lambda m: m.text == "üèãÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    user_id = message.from_user.id
    data = stats.get(user_id, {"workout_count": 0, "total_tasks": 0})
    await message.reply(f"üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {data['workout_count']}\n"
                        f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {data['total_tasks']}")


# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏ ===
@dp.message(lambda m: m.text == "üè∑Ô∏è –¢–µ–≥–∏")
async def manage_tags(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = "manage_tags"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for tag in user_tags.get(user_id, {}):
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=f"üè∑Ô∏è {tag}", callback_data=f"edit_tag_{tag}")
        ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π —Ç–µ–≥", callback_data="add_tag")
    ])
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=keyboard)


# === –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ===
@dp.message(lambda m: m.text == "‚ûï –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def new_reminder_prompt(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = "adding_reminder"

    system_tags = "\n".join([f"üè∑Ô∏è {tag}" for tag in CATEGORIES if tag != "default"])
    user_tags_str = "\n".join([f"üè∑Ô∏è {tag}" for tag in user_tags.get(user_id, {})]) or "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤"

    await message.reply(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"[–∫–∞—Ç–µ–≥–æ—Ä–∏—è/—Ç–µ–≥] [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç]\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:\n"
        f"–°–∏—Å—Ç–µ–º–Ω—ã–µ:\n{system_tags}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ:\n{user_tags_str}",
        parse_mode="Markdown"
    )


# === –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
@dp.message(lambda m: m.text == "üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def show_my_reminders(message: types.Message):
    user_id = message.from_user.id
    user_reminders = reminders.get(user_id, [])

    if not user_reminders:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for idx, reminder in enumerate(user_reminders):
        time_str = reminder.get("time", "")
        text = reminder.get("text", "")
        category = reminder.get("category", "")

        display = f"{CATEGORIES.get(category, {}).get('emoji', '‚è∞')} {time_str} - {text}"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=display, callback_data=f"delete_reminder_{idx}")
        ])

    await message.reply("–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message()
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip().lower()

    # –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if text in ["üèãÔ∏è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîî –º–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚ûï –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üè∑Ô∏è —Ç–µ–≥–∏"]:
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞
    if user_states.get(user_id) == "waiting_for_tag_name":
        user_states[user_id] = "waiting_for_tag_text"
        user_states[f"{user_id}_temp_tag"] = text
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–≥–∞:")
        return

    elif user_states.get(user_id) == "waiting_for_tag_text":
        tag_name = user_states.get(f"{user_id}_temp_tag")
        if tag_name:
            if user_id not in user_tags:
                user_tags[user_id] = {}
            user_tags[user_id][tag_name] = text
            user_states.pop(f"{user_id}_temp_tag", None)
            user_states.pop(user_id, None)
            save_data()
            await message.reply(f"‚úÖ –¢–µ–≥ '{tag_name}' —Å–æ–∑–¥–∞–Ω!")
            await manage_tags(message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if user_states.get(user_id) == "adding_reminder":
        parts = text.split()
        if len(parts) < 3:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: workout 15:00 –í—ã–ø–∏—Ç—å –≤–æ–¥—ã")
            return

        category = parts[0]
        time_str = parts[1]
        reminder_text = " ".join(parts[2:])

        try:
            hour, minute = map(int, time_str.split(":"))

            if user_id not in reminders:
                reminders[user_id] = []

            reminders[user_id].append({
                "time": time_str,
                "text": reminder_text,
                "category": category
            })
            save_data()

            scheduler.add_job(
                send_reminder,
                "cron",
                hour=hour,
                minute=minute,
                args=[user_id, reminder_text, category]
            )
            await message.reply(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {reminder_text}")
            user_states.pop(user_id, None)

        except (ValueError, IndexError):
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 15:00")
        return


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ===
async def send_reminder(user_id, text, category):
    emoji = CATEGORIES.get(category, {}).get("emoji", "‚è∞")
    prefix = CATEGORIES.get(category, {}).get("prefix", "")

    if category in user_tags.get(user_id, {}):
        prefix = ""
        text = user_tags[user_id][category]

    message = f"{emoji} {prefix} {text}" if prefix else f"{emoji} {text}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            callback_data=f"complete_{user_id}_{category}_{text.replace(' ', '_')}"
        )]
    ])

    try:
        await bot.send_message(user_id, message, reply_markup=keyboard)
        await bot.send_animation(user_id, animation=random.choice(SUCCESS_GIFS))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback ===
@dp.callback_query(lambda c: c.data.startswith("delete_reminder_"))
async def handle_delete_reminder(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        idx = int(callback.data.split("_")[2])

        if 0 <= idx < len(reminders.get(user_id, [])):
            removed = reminders[user_id].pop(idx)
            save_data()
            await callback.message.edit_text(f"üóë –£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {removed['text']}")
        else:
            await callback.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    except (ValueError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")


@dp.callback_query(lambda c: c.data.startswith("add_tag"))
async def handle_add_tag(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id] = "waiting_for_tag_name"
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞:")


@dp.callback_query(lambda c: c.data.startswith("edit_tag_"))
async def handle_edit_tag(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    tag_name = callback.data.split("_")[2]
    user_states[user_id] = f"editing_tag_{tag_name}"
    current_text = user_tags[user_id].get(tag_name, "")
    await callback.message.edit_text(f"–¢–µ–∫—Å—Ç –¥–ª—è '{tag_name}': {current_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ===
@dp.callback_query(lambda c: c.data.startswith("complete_"))
async def handle_complete(callback: types.CallbackQuery):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –Ω–∞ —á–∞—Å—Ç–∏ (–º–∞–∫—Å–∏–º—É–º 4 —á–∞—Å—Ç–∏)
        parts = callback.data.split("_", 3)  # ["complete", user_id, category, text]

        if len(parts) < 4:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        _, user_id_str, category, text = parts

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ int
        try:
            user_id = int(user_id_str)
        except ValueError:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if user_id not in stats:
            stats[user_id] = {"workout_count": 0, "total_tasks": 0}

        if category == "workout":
            stats[user_id]["workout_count"] = stats[user_id].get("workout_count", 0) + 1
        stats[user_id]["total_tasks"] = stats[user_id].get("total_tasks", 0) + 1
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await callback.message.edit_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {text}")
        await bot.send_animation(callback.from_user.id, animation=random.choice(SUCCESS_GIFS))

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    load_data()

    for user_id, user_reminders in reminders.items():
        for reminder in user_reminders:
            try:
                category = reminder.get("category")
                time_str = reminder.get("time", "00:00")
                hour, minute = map(int, time_str.split(":"))

                scheduler.add_job(
                    send_reminder,
                    "cron",
                    hour=hour,
                    minute=minute,
                    args=[user_id, reminder["text"], category]
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    finally:
        save_data()