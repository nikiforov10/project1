import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import pytz
import random
from dotenv import load_dotenv
import os
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
TOKEN = os.getenv('TOKEN')

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===

TZ = "Europe/Moscow"  # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å

# === –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
CATEGORIES = {
    "birthday": {"emoji": "üéÇ", "style": "celebrate"},
    "workout": {"emoji": "üí™", "style": "motivation"},
    "study": {"emoji": "üìö", "style": "focus"},
}

# === –ì–∏—Ñ–∫–∏ ===
SUCCESS_GIFS = ["https://media.giphy.com/media/1.gif ", "https://media.giphy.com/media/2.gif "]
FAIL_GIFS = ["https://media.giphy.com/media/3.gif ", "https://media.giphy.com/media/4.gif "]

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ ===
reminders = {}  # {user_id: [ {time, text, category, friend_id}, ... ]}
stats = {}  # {user_id: {total: 0, completed: 0}}

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=TZ)

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in reminders:
        reminders[user_id] = []
        stats[user_id] = {"total": 0, "completed": 0}
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –î–æ–±–∞–≤—å—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n`15:00 –í—ã–ø–∏—Ç—å –≤–æ–¥—ã workout`", parse_mode="Markdown")

@dp.message(Command("add"))
async def add_reminder(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n`15:00 –í—ã–ø–∏—Ç—å –≤–æ–¥—ã workout`", parse_mode="Markdown")

@dp.message(Command("stats"))
async def show_stats(message: types.Message):
    user_id = message.from_user.id
    data = stats.get(user_id, {"total": 0, "completed": 0})
    percent = (data["completed"] / data["total"] * 100) if data["total"] else 0
    await message.reply(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {data['completed']}/{data['total']} ({percent:.1f}%)")

@dp.message(Command("help"))
async def help(message: types.Message):
    await message.reply("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/add\n/stats\n/help")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message()
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    try:
        time_str, *rest = text.split()
        hour, minute = map(int, time_str.split(":"))
        category = rest[-1] if rest[-1] in CATEGORIES else None
        if category:
            text_content = " ".join(rest[:-1])
        else:
            text_content = " ".join(rest)
            category = "default"

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å
        if user_id not in reminders:
            reminders[user_id] = []
        reminders[user_id].append({
            "time": time_str,
            "text": text_content,
            "category": category,
            "friend_id": None,  # –î–ª—è –ø–∞—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        })

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.add_job(
            send_reminder,
            "cron",
            hour=hour,
            minute=minute,
            args=[user_id, text_content, category]
        )

        await message.reply(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {time_str}\n–¢–µ–∫—Å—Ç: {text_content}")

    except Exception as e:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `15:00 –í—ã–ø–∏—Ç—å –≤–æ–¥—ã workout`", parse_mode="Markdown")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ===
async def send_reminder(user_id, text, category):
    emoji = CATEGORIES.get(category, {}).get("emoji", "‚è∞")
    message = f"{emoji} {text}"
    try:
        await bot.send_message(user_id, message)
        await bot.send_animation(user_id, animation=random.choice(SUCCESS_GIFS))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())